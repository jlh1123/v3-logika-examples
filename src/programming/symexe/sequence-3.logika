import org.sireum.logika._

// Convenient Notations for ∀ and ∃
l"""{ fact def P(n: Z): B }"""  // an (uninterpreted) predicate P

val a: ZS = ZS.random

l"""{
  // ∀x: (0 .. a.size)  P(x)     is equivalent to   ∀x: Z  0 ≤ x ∧ x ≤ a.size → P(x)
  1. (∀x: (0 .. a.size)    P(x)) == (∀x: Z  0 ≤ x ∧ x ≤ a.size → P(x))    auto

  // ∀x: (0 ..< a.size)  P(x)    is equivalent to   ∀x: Z  0 ≤ x ∧ x < a.size → P(x)
  2. (∀x: (0 ..< a.size)   P(x)) == (∀x: Z  0 ≤ x ∧ x < a.size → P(x))    auto

  // ∀x: (0 <.. a.size)  P(x)    is equivalent to   ∀x: Z  0 < x ∧ x ≤ a.size → P(x)
  3. (∀x: (0 <.. a.size)   P(x)) == (∀x: Z  0 < x ∧ x ≤ a.size → P(x))    auto

  // ∀x: (0 <..< a.size)  P(x)   is equivalent to   ∀x: Z  0 < x ∧ x < a.size → P(x)
  4. (∀x: (0 <..< a.size)  P(x)) == (∀x: Z  0 < x ∧ x < a.size → P(x))    auto

  // ∃x: (0 .. a.size)  P(x)     is equivalent to   ∃x: Z  0 ≤ x ∧ x ≤ a.size ∧ P(x)
  5. (∃x: (0 .. a.size)    P(x)) == (∃x: Z  0 ≤ x ∧ x ≤ a.size ∧ P(x))    auto

  // ∃x: (0 ..< a.size)  P(x)    is equivalent to   ∃x: Z  0 ≤ x ∧ x < a.size ∧ P(x)
  6. (∃x: (0 ..< a.size)   P(x)) == (∃x: Z  0 ≤ x ∧ x < a.size ∧ P(x))    auto

  // ∃x: (0 <.. a.size)  P(x)    is equivalent to   ∃x: Z  0 < x ∧ x ≤ a.size ∧ P(x)
  7. (∃x: (0 <.. a.size)   P(x)) == (∃x: Z  0 < x ∧ x ≤ a.size ∧ P(x))    auto

  // ∃x: (0 <..< a.size)  P(x)   is equivalent to   ∃x: Z  0 < x ∧ x < a.size ∧ P(x)
  8. (∃x: (0 <..< a.size)  P(x)) == (∃x: Z  0 < x ∧ x < a.size ∧ P(x))    auto
}"""
