import org.sireum.logika._

var balance: Z = 0
var elite: B = false
val eliteMin: Z = 1000000 // $1M is the minimum balance for elite members

l"""{ invariant
        balance ≥ 0
        elite == (balance ≥ eliteMin)             }"""

// note that balance_in is the initial value of balance at the function entry point
def deposit(amount: Z): B = {
  l"""{ requires  amount ≥ 0
        modifies  balance, elite
        ensures   balance_in == balance - amount  }"""

  balance = balance + amount

  if (balance >= eliteMin) {
    elite = true
  } else {
    elite = false
  }

  return elite
}

def withdraw(amount: Z): B = {
  l"""{ requires  balance ≥ amount
        modifies  balance, elite
        ensures   balance == balance_in - amount  }"""

  balance = balance - amount

  if (balance >= eliteMin) {
    elite = true
  } else {
    elite = false
  }

  return elite
}

deposit(500000)
assert(balance == 500000 & !elite)
deposit(600000)
assert(balance == 1100000 & elite)
withdraw(150000)
assert(balance == 950000 & !elite)
deposit(200000)
assert(balance == 1150000 & elite)
