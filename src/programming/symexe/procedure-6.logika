import org.sireum.logika._

// Given a sequence and two indices,
// swap the elements at the given indices.
def swap(a: ZS, i: Z, j: Z): Unit = {  // Unit is like void in Java
  l"""{ requires 0 ≤ i ∧ i < a.size    // i is a valid index
                 0 ≤ j ∧ j < a.size    // j is a valid index
        modifies a                     // documents a is modified
        ensures  // note: a_in is the value of a at procedure entry point
                 a(i) == a_in(j) ∧ a(j) == a_in(i)
                 ∀k: (0 ..< a.size)
                   k ≠ i ∧ k ≠ j → a(k) == a_in(k)
                 a.size == a_in.size
  }"""
  val t: Z = a(i)
  a(i) = a(j)
  a(j) = t
}

val zs: ZS = ZS(1, 2, 3)

l"""{ 1. 0 ≤ 0 ∧ 0 < zs.size  auto  // obligation for the 1st swap's requires
      2. 0 ≤ 2 ∧ 2 < zs.size  auto  // obligation for the 2nd swap's requires
}"""

swap(zs, 0, 2)

l"""{ 1. zs(0) == zs_old(2) ∧ zs(2) == zs_old(0)  premise // guarantee from the 1st swap's ensures
      2. ∀k: (0 ..< zs.size)
           k ≠ 0 ∧ k ≠ 2 → zs(k) == zs_old(k)     premise // guarantee from the 2nd swap's ensures
      3. zs.size == zs_old.size                   premise // guarantee from the 3rd swap's ensures
}"""
assert(zs == ZS(3, 2, 1))